// <auto-generated />
using System;
using BLWSDAI.Data;
using BLWSDAI.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BLWSDAI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250420170100_UpdateConsumerModel")]
    partial class UpdateConsumerModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "public", "bill_status_enum", new[] { "unpaid", "partial", "overdue", "paid" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "public", "consumer_status_enum", new[] { "active", "disconnected", "cut" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "public", "notif_pref_enum", new[] { "sms", "email", "sms_and_email", "none" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "public", "payment_type_enum", new[] { "cash", "gcash", "maya" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "public", "purok_enum", new[] { "_1", "_2", "_3", "_4", "_5" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "public", "user_role_enum", new[] { "admin", "staff" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "user_role_enum", new[] { "admin", "staff" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BLWSDAI.Models.Consumer", b =>
                {
                    b.Property<int>("ConsumerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("consumer_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ConsumerId"));

                    b.Property<bool>("Archived")
                        .HasColumnType("boolean")
                        .HasColumnName("archived");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("MeterSerial")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("meter_serial");

                    b.Property<string>("MiddleInitial")
                        .HasColumnType("text")
                        .HasColumnName("middle_initial");

                    b.Property<int>("NotifPreference")
                        .HasColumnType("integer")
                        .HasColumnName("notif_preference");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<int>("Purok")
                        .HasColumnType("integer")
                        .HasColumnName("purok");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("ConsumerId")
                        .HasName("pk_consumers");

                    b.HasIndex("MeterSerial")
                        .IsUnique()
                        .HasDatabaseName("ix_consumers_meter_serial");

                    b.ToTable("consumers", null, t =>
                        {
                            t.HasCheckConstraint("CK_Consumer_PhoneNumber_Format", "phone_number ~ '^09[0-9]{9}$'");
                        });
                });

            modelBuilder.Entity("BLWSDAI.Models.MotherMeterReading", b =>
                {
                    b.Property<int>("MotherMeterReadingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("mother_meter_reading_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MotherMeterReadingId"));

                    b.Property<bool>("Archived")
                        .HasColumnType("boolean")
                        .HasColumnName("archived");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("MonthYear")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("month_year");

                    b.Property<decimal>("Reading")
                        .HasColumnType("numeric")
                        .HasColumnName("reading");

                    b.HasKey("MotherMeterReadingId")
                        .HasName("pk_mother_meter_readings");

                    b.ToTable("mother_meter_readings", (string)null);
                });

            modelBuilder.Entity("BLWSDAI.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("payment_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("numeric")
                        .HasColumnName("amount_paid");

                    b.Property<int>("BillId")
                        .HasColumnType("integer")
                        .HasColumnName("bill_id");

                    b.Property<int>("ConsumerId")
                        .HasColumnType("integer")
                        .HasColumnName("consumer_id");

                    b.Property<string>("NotifStatus")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("notif_status");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("payment_date");

                    b.Property<int>("PaymentType")
                        .HasColumnType("integer")
                        .HasColumnName("payment_type");

                    b.Property<decimal>("Penalty")
                        .HasColumnType("numeric")
                        .HasColumnName("penalty");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("PaymentId")
                        .HasName("pk_payments");

                    b.HasIndex("BillId")
                        .HasDatabaseName("ix_payments_bill_id");

                    b.HasIndex("ConsumerId")
                        .HasDatabaseName("ix_payments_consumer_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_payments_user_id");

                    b.ToTable("payments", null, t =>
                        {
                            t.HasCheckConstraint("CK_Payment_AmountPaid_Positive", "amount_paid >= 0");
                        });
                });

            modelBuilder.Entity("BLWSDAI.Models.Reading", b =>
                {
                    b.Property<int>("ReadingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("reading_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ReadingId"));

                    b.Property<bool>("Archived")
                        .HasColumnType("boolean")
                        .HasColumnName("archived");

                    b.Property<int>("ConsumerId")
                        .HasColumnType("integer")
                        .HasColumnName("consumer_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("MonthYear")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("month_year");

                    b.Property<decimal>("PresentReading")
                        .HasColumnType("numeric")
                        .HasColumnName("present_reading");

                    b.Property<decimal>("PreviousReading")
                        .HasColumnType("numeric")
                        .HasColumnName("previous_reading");

                    b.Property<DateTime>("ReadingDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("reading_date");

                    b.HasKey("ReadingId")
                        .HasName("pk_readings");

                    b.HasIndex("ConsumerId", "MonthYear")
                        .IsUnique()
                        .HasDatabaseName("ix_readings_consumer_id_month_year");

                    b.ToTable("readings", (string)null);
                });

            modelBuilder.Entity("BLWSDAI.Models.SalaryInfo", b =>
                {
                    b.Property<int>("SalaryInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("salary_info_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SalaryInfoId"));

                    b.Property<decimal>("AuditorSalary")
                        .HasColumnType("numeric")
                        .HasColumnName("auditor_salary");

                    b.Property<decimal>("Maintenance1Salary")
                        .HasColumnType("numeric")
                        .HasColumnName("maintenance1salary");

                    b.Property<decimal>("Maintenance2Salary")
                        .HasColumnType("numeric")
                        .HasColumnName("maintenance2salary");

                    b.Property<decimal>("PresidentSalary")
                        .HasColumnType("numeric")
                        .HasColumnName("president_salary");

                    b.Property<decimal>("SecretarySalary")
                        .HasColumnType("numeric")
                        .HasColumnName("secretary_salary");

                    b.Property<decimal>("TreasurerSalary")
                        .HasColumnType("numeric")
                        .HasColumnName("treasurer_salary");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<decimal>("VicePresidentSalary")
                        .HasColumnType("numeric")
                        .HasColumnName("vice_president_salary");

                    b.HasKey("SalaryInfoId")
                        .HasName("pk_salary_infos");

                    b.ToTable("salary_infos", null, t =>
                        {
                            t.HasCheckConstraint("CK_SalaryInfo_SingleRow", "salary_info_id = 1");
                        });
                });

            modelBuilder.Entity("BLWSDAI.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<bool>("Archived")
                        .HasColumnType("boolean")
                        .HasColumnName("archived");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<UserRoleEnum>("Role")
                        .HasColumnType("user_role_enum")
                        .HasColumnName("role");

                    b.HasKey("UserId")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Bill", b =>
                {
                    b.Property<int>("BillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("bill_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BillId"));

                    b.Property<bool>("Archived")
                        .HasColumnType("boolean")
                        .HasColumnName("archived");

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric")
                        .HasColumnName("balance");

                    b.Property<DateTime>("BillingDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("billing_date");

                    b.Property<int>("ConsumerId")
                        .HasColumnType("integer")
                        .HasColumnName("consumer_id");

                    b.Property<DateTime>("MonthYear")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("month_year");

                    b.Property<int?>("MotherMeterReadingId")
                        .HasColumnType("integer")
                        .HasColumnName("mother_meter_reading_id");

                    b.Property<string>("NotifStatus")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("notif_status");

                    b.Property<int>("ReadingId")
                        .HasColumnType("integer")
                        .HasColumnName("reading_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<decimal>("Subsidy")
                        .HasColumnType("numeric")
                        .HasColumnName("subsidy");

                    b.Property<decimal>("SystemLoss")
                        .HasColumnType("numeric")
                        .HasColumnName("system_loss");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("total_amount");

                    b.HasKey("BillId")
                        .HasName("pk_bills");

                    b.HasIndex("MotherMeterReadingId")
                        .HasDatabaseName("ix_bills_mother_meter_reading_id");

                    b.HasIndex("ReadingId")
                        .HasDatabaseName("ix_bills_reading_id");

                    b.HasIndex("ConsumerId", "MonthYear")
                        .IsUnique()
                        .HasDatabaseName("ix_bills_consumer_id_month_year");

                    b.ToTable("bills", null, t =>
                        {
                            t.HasCheckConstraint("CK_Bill_TotalAmount_Positive", "total_amount >= 0");
                        });
                });

            modelBuilder.Entity("BLWSDAI.Models.Payment", b =>
                {
                    b.HasOne("Bill", "Bill")
                        .WithMany("Payments")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_payments_bills_bill_id");

                    b.HasOne("BLWSDAI.Models.Consumer", "Consumer")
                        .WithMany("Payments")
                        .HasForeignKey("ConsumerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_payments_consumers_consumer_id");

                    b.HasOne("BLWSDAI.Models.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_payments_users_user_id");

                    b.Navigation("Bill");

                    b.Navigation("Consumer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BLWSDAI.Models.Reading", b =>
                {
                    b.HasOne("BLWSDAI.Models.Consumer", "Consumer")
                        .WithMany("Readings")
                        .HasForeignKey("ConsumerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_readings_consumers_consumer_id");

                    b.Navigation("Consumer");
                });

            modelBuilder.Entity("Bill", b =>
                {
                    b.HasOne("BLWSDAI.Models.Consumer", "Consumer")
                        .WithMany("Bills")
                        .HasForeignKey("ConsumerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_bills_consumers_consumer_id");

                    b.HasOne("BLWSDAI.Models.MotherMeterReading", "MotherMeterReading")
                        .WithMany("Bills")
                        .HasForeignKey("MotherMeterReadingId")
                        .HasConstraintName("fk_bills_mother_meter_readings_mother_meter_reading_id");

                    b.HasOne("BLWSDAI.Models.Reading", "Reading")
                        .WithMany("Bills")
                        .HasForeignKey("ReadingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_bills_readings_reading_id");

                    b.Navigation("Consumer");

                    b.Navigation("MotherMeterReading");

                    b.Navigation("Reading");
                });

            modelBuilder.Entity("BLWSDAI.Models.Consumer", b =>
                {
                    b.Navigation("Bills");

                    b.Navigation("Payments");

                    b.Navigation("Readings");
                });

            modelBuilder.Entity("BLWSDAI.Models.MotherMeterReading", b =>
                {
                    b.Navigation("Bills");
                });

            modelBuilder.Entity("BLWSDAI.Models.Reading", b =>
                {
                    b.Navigation("Bills");
                });

            modelBuilder.Entity("BLWSDAI.Models.User", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Bill", b =>
                {
                    b.Navigation("Payments");
                });
#pragma warning restore 612, 618
        }
    }
}
